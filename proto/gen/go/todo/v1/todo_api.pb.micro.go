// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: todo_api.proto

package todov1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TodoService service

type TodoService interface {
	GetTodos(ctx context.Context, in *GetTodosRequest, opts ...client.CallOption) (*GetTodosResponse, error)
	DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...client.CallOption) (*DeleteTodoResponse, error)
	AddTodo(ctx context.Context, in *AddTodoRequest, opts ...client.CallOption) (*AddTodoResponse, error)
}

type todoService struct {
	c    client.Client
	name string
}

func NewTodoService(name string, c client.Client) TodoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "todo.v1"
	}
	return &todoService{
		c:    c,
		name: name,
	}
}

func (c *todoService) GetTodos(ctx context.Context, in *GetTodosRequest, opts ...client.CallOption) (*GetTodosResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.GetTodos", in)
	out := new(GetTodosResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...client.CallOption) (*DeleteTodoResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.DeleteTodo", in)
	out := new(DeleteTodoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) AddTodo(ctx context.Context, in *AddTodoRequest, opts ...client.CallOption) (*AddTodoResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.AddTodo", in)
	out := new(AddTodoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TodoService service

type TodoServiceHandler interface {
	GetTodos(context.Context, *GetTodosRequest, *GetTodosResponse) error
	DeleteTodo(context.Context, *DeleteTodoRequest, *DeleteTodoResponse) error
	AddTodo(context.Context, *AddTodoRequest, *AddTodoResponse) error
}

func RegisterTodoServiceHandler(s server.Server, hdlr TodoServiceHandler, opts ...server.HandlerOption) error {
	type todoService interface {
		GetTodos(ctx context.Context, in *GetTodosRequest, out *GetTodosResponse) error
		DeleteTodo(ctx context.Context, in *DeleteTodoRequest, out *DeleteTodoResponse) error
		AddTodo(ctx context.Context, in *AddTodoRequest, out *AddTodoResponse) error
	}
	type TodoService struct {
		todoService
	}
	h := &todoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TodoService{h}, opts...))
}

type todoServiceHandler struct {
	TodoServiceHandler
}

func (h *todoServiceHandler) GetTodos(ctx context.Context, in *GetTodosRequest, out *GetTodosResponse) error {
	return h.TodoServiceHandler.GetTodos(ctx, in, out)
}

func (h *todoServiceHandler) DeleteTodo(ctx context.Context, in *DeleteTodoRequest, out *DeleteTodoResponse) error {
	return h.TodoServiceHandler.DeleteTodo(ctx, in, out)
}

func (h *todoServiceHandler) AddTodo(ctx context.Context, in *AddTodoRequest, out *AddTodoResponse) error {
	return h.TodoServiceHandler.AddTodo(ctx, in, out)
}
